{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/struct-aggregation-and-embedding-in-golang","result":{"data":{"post":{"__typename":"MdxPost","slug":"/struct-aggregation-and-embedding-in-golang","title":"Struct aggregation and embedding in golang","date":"02.08.2020","tags":[{"name":"golang","slug":"golang"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Struct aggregation and embedding in golang\",\n  \"date\": \"2020-08-02T20:34:32.000Z\",\n  \"tags\": [\"golang\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"struct\"), \",\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"is a collection of fields of various types, incuding other structs!\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can be used to create user-defined data types\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can have methods defined on them\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"its fields and methods are accessed using the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"dot\"), \" notation\")), mdx(\"p\", null, \"For example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Point\"), \" is a struct which has,\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"two fields \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"X\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Y\"), \" of type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"float64\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"has two methods \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"String\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"MakesNoSense\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-go\"\n  }, \"// structs.go\\n// Struct definition\\ntype Point struct {\\n    X, Y float64\\n}\\n\\n// String overrides how an entity of type `Point` \\n// is printed (for example, to `stdout`)\\nfunc (p Point) String() string {\\n    return fmt.Sprintf(\\\"Point {%f, %f}\\\", p.X, p.Y)\\n}\\n\\n// MakesNoSense is just a dummy method\\nfunc (p Point) MakesNoSense() {\\n    fmt.Printf(\\\"Point {%f, %f} is just a point!\\\\n\\\", p.X, p.Y)\\n    return\\n}\\n\\nfunc main() {\\n    var pt Point\\n    pt.X = 1.123 // \\n    pt.Y = 2.123 // \\n\\n    fmt.Println(pt)\\n    pt.MakesNoSense()\\n}\\n\")), mdx(\"p\", null, \"results in,\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"$ go run structs.go\\nPoint {1.123000, 2.123000}\\nPoint {1.123000, 2.123000} is just a point!\\n\")), mdx(\"h2\", null, \"Nested Structs\"), mdx(\"p\", null, \"Yes, you can define one struct inside another. There are two ways to go about it: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"struct aggregation\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"struct embedding\"), \".\"), mdx(\"h3\", null, \"Struct Aggregation\"), mdx(\"p\", null, \"This approach implies a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"has-a\"), \" relationship. For example, a line has two points (start and end) and can be declared as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-go\"\n  }, \"// Line struct has two fields of type Point\\ntype Line struct {\\n    Start, End Point\\n}\\n\\n// Distance methods calculates the euclidean distance \\n// between the two Points\\nfunc (l Line) Distance() float64 {\\n    xDiff := math.Abs(l.Start.X - l.End.X)\\n    yDiff := math.Abs(l.Start.Y - l.End.Y)\\n\\n    return math.Sqrt(math.Pow(xDiff, 2) + math.Pow(yDiff, 2))\\n}\\n\\n// Usage\\nfunc main() {\\n    l := Line{\\n        Start: Point{\\n            X: 2.304,\\n            Y: 4.504,\\n        },\\n        End: Point{\\n            X: 30.607,\\n            Y: 44.104,\\n        },\\n    }\\n    fmt.Printf(\\\"Distance from %v to %v is %f units\\\\n\\\", l.Start, l.End, l.Distance())\\n}\\n// Distance from Point {2.304000, 4.504000} to Point {30.607000, 44.104000} is 48.674632 units\\n\")), mdx(\"p\", null, \"Let's redefine \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line\"), \" struct slightly differently using inline structs,\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-go\"\n  }, \"type Line struct {\\n    Start, End struct {\\n        X float64\\n        Y float64\\n    }\\n}\\n\\n// Usage\\nfunc main() {\\n    l := Line{\\n        Start: struct {\\n            X float64\\n            Y float64\\n        }{\\n            X: 3.123,\\n            Y: 8.123,\\n        },\\n        End: struct {\\n            X float64\\n            Y float64\\n        }{\\n            X: 4.123,\\n            Y: 7.123,\\n        },\\n    }\\n}\\n\")), mdx(\"p\", null, \"This approach requires you to rely on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"anonymous structs\"), \" during initialization.\"), mdx(\"h3\", null, \"Struct Embedding\"), mdx(\"p\", null, \"This approach implies an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"is-a\"), \" relationship. For example, a rectangle is a polygon and can be decalred as shown below:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-go\"\n  }, \"// embed.go\\n// Polygon has just two fields for the sake of simplicity\\ntype Polygon struct {\\n    Width, Height int\\n}\\n\\n// Set width and height of the polygon\\nfunc (p *Polygon) Set(w, h int) {\\n    p.Width = w\\n    p.Height = h\\n}\\n\\n// Rectangle is a polygon, with one extra field 'color'\\ntype Rectangle struct {\\n    color string\\n    Polygon // Notice the embedding?\\n}\\n\\n// Area method can access the fields Width and Height even though\\n// they are not directly defined within the Rectangle struct\\nfunc (r *Rectangle) Area() float64 {\\n    return float64(r.Width * r.Height)\\n}\\n\\nfunc main() {\\n    var rect Rectangle\\n    rect.Set(10, 20) // direct\\n    rect.color = \\\"Blue\\\"\\n    fmt.Printf(\\\"Rectangle: %+v\\\\n\\\", rect)\\n    fmt.Printf(\\\"Rectangle Width: %+v\\\\n\\\", rect.Width) // direct\\n    fmt.Printf(\\\"Rectangle Height: %+v\\\\n\\\", rect.Height) // direct\\n    fmt.Printf(\\\"Area of the rectangle is: %+v\\\\n\\\", rect.Area())\\n\\n    rect.Polygon.Set(100, 200) // indirect\\n    fmt.Printf(\\\"Rectangle: %+v\\\\n\\\", rect)\\n}\\n\")), mdx(\"p\", null, \"results in,\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"$ go run embed.go\\nRectangle: {color:Blue Polygon:{Width:10 Height:20}}\\nRectangle Width: 10\\nRectangle Height: 20\\nArea of the rectangle is: 200\\nRectangle: {color:Blue Polygon:{Width:100 Height:200}}\\n\")), mdx(\"p\", null, \"You can see that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rect\"), \" can access:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Rectangle\"), \" struct's fields and methods\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Polygon\"), \" struct's fields and methods - both directly and indirectly\")), mdx(\"p\", null, \"I am not sure if that's the correct way to put it, but these are my observations.\"), mdx(\"hr\", null), mdx(\"p\", null, \"Note: \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"This article is not an in-depth tutorial or treatment of Golang's syntax, semantics, design or implementation, but a journal of my learnings.\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"A  struct , is a collection of fields of various types, incuding other structs! can be used to create user-defined data types can haveâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/struct-aggregation-and-embedding-in-golang","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}