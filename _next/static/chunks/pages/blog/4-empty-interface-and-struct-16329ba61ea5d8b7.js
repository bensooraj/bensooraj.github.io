(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[291],{985:function(s,e,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/4-empty-interface-and-struct",function(){return n(1860)}])},1860:function(s,e,n){"use strict";n.r(e);var a=n(5893),l=n(1151);function c(s){var e=Object.assign({h1:"h1",p:"p",code:"code",h2:"h2",pre:"pre",span:"span",em:"em",blockquote:"blockquote",ol:"ol",li:"li",a:"a",hr:"hr"},(0,l.ah)(),s.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{children:"The empty interface and the empty struct in golang"}),"\n",(0,a.jsxs)(e.p,{children:["An ",(0,a.jsx)(e.code,{children:"interface"})," is a collection or set of method declarations. A data type implements or satisfies an ",(0,a.jsx)(e.code,{children:"interface"})," if it at least defines the methods declared by the ",(0,a.jsx)(e.code,{children:"interface"}),"."]}),"\n",(0,a.jsx)(e.h2,{children:"Empty interface"}),"\n",(0,a.jsxs)(e.p,{children:["An empty interface ",(0,a.jsx)(e.code,{children:"interface{}"})," has zero methods. So, in essence, any data type implements or satisfies an empty interface. Let's take the following example:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsxs)(e.code,{className:"hljs language-go",children:[(0,a.jsx)(e.span,{className:"hljs-keyword",children:"type"})," Container []",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"interface"}),"{}\n\n",(0,a.jsxs)(e.span,{className:"hljs-function",children:[(0,a.jsx)(e.span,{className:"hljs-keyword",children:"func"})," ",(0,a.jsx)(e.span,{className:"hljs-params",children:"(c *Container)"})]})," Put(elem ",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"interface"}),"{}) {\n    *c = ",(0,a.jsx)(e.span,{className:"hljs-built_in",children:"append"}),"(*c, elem)\n    ",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"switch"})," elem.(",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"type"}),") {\n    ",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"case"})," ",(0,a.jsx)(e.span,{className:"hljs-type",children:"int"}),":\n        fmt.Println(",(0,a.jsx)(e.span,{className:"hljs-string",children:'"Put "'}),", elem, ",(0,a.jsx)(e.span,{className:"hljs-string",children:'" of type int"'}),")\n    ",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"case"})," ",(0,a.jsx)(e.span,{className:"hljs-type",children:"string"}),":\n        fmt.Println(",(0,a.jsx)(e.span,{className:"hljs-string",children:'"Put "'}),", elem, ",(0,a.jsx)(e.span,{className:"hljs-string",children:'" of type string"'}),")\n    ",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"default"}),":\n        fmt.Println(",(0,a.jsx)(e.span,{className:"hljs-string",children:'"Put "'}),", elem, ",(0,a.jsx)(e.span,{className:"hljs-string",children:'" of type unknown"'}),")\n    }\n}\n\n",(0,a.jsxs)(e.span,{className:"hljs-function",children:[(0,a.jsx)(e.span,{className:"hljs-keyword",children:"func"})," ",(0,a.jsx)(e.span,{className:"hljs-params",children:"(c *Container)"})]})," Pop() ",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"interface"}),"{} {\n    elem := (*c)[",(0,a.jsx)(e.span,{className:"hljs-number",children:"0"}),"]\n    *c = (*c)[",(0,a.jsx)(e.span,{className:"hljs-number",children:"1"}),":]\n    ",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"return"})," elem\n}\n\n",(0,a.jsxs)(e.span,{className:"hljs-function",children:[(0,a.jsx)(e.span,{className:"hljs-keyword",children:"func"})," ",(0,a.jsx)(e.span,{className:"hljs-title",children:"main"}),(0,a.jsx)(e.span,{className:"hljs-params",children:"()"})]})," {\n    allContainer := &Container{}\n\n    allContainer.Put(",(0,a.jsx)(e.span,{className:"hljs-string",children:'"Hello"'}),")\n    allContainer.Put(",(0,a.jsx)(e.span,{className:"hljs-number",children:"213"}),")\n    allContainer.Put(",(0,a.jsx)(e.span,{className:"hljs-number",children:"123.321"}),")\n\n    fmt.Printf(",(0,a.jsx)(e.span,{className:"hljs-string",children:'"allContainer: %+v\\n\\n"'}),", allContainer)\n}\n"]})}),"\n",(0,a.jsx)(e.p,{children:"Output:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsxs)(e.code,{className:"hljs language-sh",children:["$ go run main.go\nPut  Hello  of ",(0,a.jsx)(e.span,{className:"hljs-built_in",children:"type"})," string\nPut  213  of ",(0,a.jsx)(e.span,{className:"hljs-built_in",children:"type"})," int\nPut  123.321  of ",(0,a.jsx)(e.span,{className:"hljs-built_in",children:"type"})," unknown\nallContainer: &[Hello 213 123.321]\n"]})}),"\n",(0,a.jsxs)(e.p,{children:["In the above example, the data type ",(0,a.jsx)(e.code,{children:"Container"})," is a slice of empty interfaces with two methods defined on it, ",(0,a.jsx)(e.code,{children:"Put()"})," and ",(0,a.jsx)(e.code,{children:"Pop()"}),". It loosely resembles a ",(0,a.jsx)(e.em,{children:"First In, Last Out"})," stack."]}),"\n",(0,a.jsxs)(e.p,{children:["The ",(0,a.jsx)(e.code,{children:"Put()"})," method takes an ",(0,a.jsx)(e.code,{children:"interface{}"})," as the input argument and appends it to the slice of ",(0,a.jsx)(e.code,{children:"interface{}"}),"s. This means that it can accept a string, an integer, a float or any other simple and composite data type as its input argument. You can access the underlying type of ",(0,a.jsx)(e.code,{children:"elem"}),", an ",(0,a.jsx)(e.code,{children:"interface{}"}),", using ",(0,a.jsx)(e.code,{children:"elem.(type)"}),"."]}),"\n",(0,a.jsx)(e.p,{children:"This approach does have its disadvantages though. One being that you should implement type assertions, checks or type specific logics to avoid any surprises during runtime."}),"\n",(0,a.jsx)(e.h2,{children:"Empty struct"}),"\n",(0,a.jsx)(e.p,{children:"To quote the Golang spec:"}),"\n",(0,a.jsxs)(e.blockquote,{children:["\n",(0,a.jsx)(e.p,{children:"A struct is a sequence of named elements, called fields, each of which has a name and a type."}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"Let's take an example"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsxs)(e.code,{className:"hljs language-go",children:[(0,a.jsx)(e.span,{className:"hljs-comment",children:"// A struct with 5 fields."}),"\n",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"struct"})," {\n    x, y ",(0,a.jsx)(e.span,{className:"hljs-type",children:"int"}),"\n    u ",(0,a.jsx)(e.span,{className:"hljs-type",children:"float32"}),"\n    A *[]",(0,a.jsx)(e.span,{className:"hljs-type",children:"int"}),"\n    F ",(0,a.jsxs)(e.span,{className:"hljs-function",children:[(0,a.jsx)(e.span,{className:"hljs-keyword",children:"func"}),(0,a.jsx)(e.span,{className:"hljs-params",children:"()"})]}),"\n}\n"]})}),"\n",(0,a.jsx)(e.p,{children:"An empty struct is a struct data type with zero fields:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsxs)(e.code,{className:"hljs language-go",children:[(0,a.jsx)(e.span,{className:"hljs-comment",children:"// Named type"}),"\n",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"type"})," EmptyStruct ",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"struct"}),"{}\n\n",(0,a.jsx)(e.span,{className:"hljs-comment",children:"// Variable declaration"}),"\n",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"var"})," es ",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"struct"}),"{}\n\n",(0,a.jsx)(e.span,{className:"hljs-comment",children:"// Or use it directly!"}),"\n",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"struct"}),"{}{}\n"]})}),"\n",(0,a.jsxs)(e.p,{children:["The size or width of a ",(0,a.jsx)(e.code,{children:"struct"})," is defined as the sum of its constituent types. An empty ",(0,a.jsx)(e.code,{children:"struct"}),", since it has no fields within it, has a size or width of zero. Zero bytes!"]}),"\n",(0,a.jsx)(e.p,{children:"Just like regular structs you can define methods on empty structs as well. Sort of like a zero sized container for methods:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsxs)(e.code,{className:"hljs language-go",children:[(0,a.jsx)(e.span,{className:"hljs-keyword",children:"type"})," EmptyStruct ",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"struct"}),"{}\n\n",(0,a.jsxs)(e.span,{className:"hljs-function",children:[(0,a.jsx)(e.span,{className:"hljs-keyword",children:"func"})," ",(0,a.jsx)(e.span,{className:"hljs-params",children:"(es *EmptyStruct)"})]})," WhoAmI() {\n    fmt.Println(",(0,a.jsx)(e.span,{className:"hljs-string",children:'"I am an empty struct!"'}),")\n}\n"]})}),"\n",(0,a.jsx)(e.p,{children:"Empty structs find its best use case in channel signalling. Many a mere mortals such as me have used booleans or integers to notify an event over a channel."}),"\n",(0,a.jsx)(e.p,{children:"The following example prints the current time at every 500 milliseconds and times out after 3 seconds,"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsxs)(e.code,{className:"hljs language-go",children:[(0,a.jsxs)(e.span,{className:"hljs-function",children:[(0,a.jsx)(e.span,{className:"hljs-keyword",children:"func"})," ",(0,a.jsx)(e.span,{className:"hljs-title",children:"printFor3Seconds"}),(0,a.jsxs)(e.span,{className:"hljs-params",children:["(doneChannel ",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"chan"})," ",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"struct"}),"{})"]})]})," {\n    ticker := time.NewTicker(",(0,a.jsx)(e.span,{className:"hljs-number",children:"500"})," * time.Millisecond)\n    timeout := time.After(",(0,a.jsx)(e.span,{className:"hljs-number",children:"3"})," * time.Second)\n\n    ",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"for"})," {\n        ",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"select"})," {\n        ",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"case"})," t := <-ticker.C:\n            fmt.Printf(",(0,a.jsx)(e.span,{className:"hljs-string",children:'"Tik tik: %v\\n"'}),", t)\n        ",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"case"})," <-timeout:\n            fmt.Printf(",(0,a.jsx)(e.span,{className:"hljs-string",children:'"Timeout at: %v\\n"'}),", time.Now())\n            doneChannel <- ",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"struct"}),"{}{}\n            ",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"return"}),"\n        }\n    }\n}\n\n",(0,a.jsxs)(e.span,{className:"hljs-function",children:[(0,a.jsx)(e.span,{className:"hljs-keyword",children:"func"})," ",(0,a.jsx)(e.span,{className:"hljs-title",children:"main"}),(0,a.jsx)(e.span,{className:"hljs-params",children:"()"})]})," {\n    doneChannel := ",(0,a.jsx)(e.span,{className:"hljs-built_in",children:"make"}),"(",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"chan"})," ",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"struct"}),"{}, ",(0,a.jsx)(e.span,{className:"hljs-number",children:"1"}),")\n\n    ",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"go"})," printFor3Seconds(doneChannel)\n\n    <-doneChannel\n}\n\n",(0,a.jsx)(e.span,{className:"hljs-comment",children:"// Output"}),"\n",(0,a.jsx)(e.span,{className:"hljs-comment",children:"// $ go run 1.go"}),"\n",(0,a.jsx)(e.span,{className:"hljs-comment",children:"// Tik tik: 2020-09-16 08:25:36.750631 +0530 IST m=+0.501680080"}),"\n",(0,a.jsx)(e.span,{className:"hljs-comment",children:"// Tik tik: 2020-09-16 08:25:37.250303 +0530 IST m=+1.001337269"}),"\n",(0,a.jsx)(e.span,{className:"hljs-comment",children:"// Tik tik: 2020-09-16 08:25:37.750696 +0530 IST m=+1.501714888"}),"\n",(0,a.jsx)(e.span,{className:"hljs-comment",children:"// Tik tik: 2020-09-16 08:25:38.253708 +0530 IST m=+2.004711715"}),"\n",(0,a.jsx)(e.span,{className:"hljs-comment",children:"// Tik tik: 2020-09-16 08:25:38.752804 +0530 IST m=+2.503793180"}),"\n",(0,a.jsx)(e.span,{className:"hljs-comment",children:"// Tik tik: 2020-09-16 08:25:39.251941 +0530 IST m=+3.002914584"}),"\n",(0,a.jsx)(e.span,{className:"hljs-comment",children:"// Timeout at: 2020-09-16 08:25:39.251999 +0530 IST m=+3.002972846"}),"\n"]})}),"\n",(0,a.jsxs)(e.p,{children:["Instead of ",(0,a.jsx)(e.code,{children:"doneChannel <- 0"})," or ",(0,a.jsx)(e.code,{children:"doneChannel <- true"}),", I am using ",(0,a.jsx)(e.code,{children:"doneChannel <- struct{}{}"})," for channel signalling. Using booleans or integers for channel signalling involves memory allocation, copying over the element etc."]}),"\n",(0,a.jsx)(e.p,{children:"We can use empty structs for simulating sets as well,"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsxs)(e.code,{className:"hljs language-go",children:["intSet := ",(0,a.jsx)(e.span,{className:"hljs-built_in",children:"make"}),"(",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"map"}),"[",(0,a.jsx)(e.span,{className:"hljs-type",children:"int"}),"]",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"struct"}),"{})\nempty := ",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"struct"}),"{}{}\n\n",(0,a.jsx)(e.span,{className:"hljs-comment",children:"// We are setting empty as the value for 1, because the"}),"\n",(0,a.jsx)(e.span,{className:"hljs-comment",children:"// value is meaningless"}),"\nintSet[",(0,a.jsx)(e.span,{className:"hljs-number",children:"1"}),"] = empty\n",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"if"})," _, ok := intSet[",(0,a.jsx)(e.span,{className:"hljs-number",children:"1"}),"]; ok {\n    fmt.Println(",(0,a.jsx)(e.span,{className:"hljs-string",children:'"1 is in the set"'}),")\n}\n\n",(0,a.jsx)(e.span,{className:"hljs-comment",children:"// 2 is not one of intSet's keys"}),"\n",(0,a.jsx)(e.span,{className:"hljs-keyword",children:"if"})," _, ok := intSet[",(0,a.jsx)(e.span,{className:"hljs-number",children:"2"}),"]; !ok {\n    fmt.Println(",(0,a.jsx)(e.span,{className:"hljs-string",children:'"2 is not in the set"'}),")\n}\n"]})}),"\n",(0,a.jsx)(e.h2,{children:"Resources:"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"https://golang.org/ref/spec#Struct_types",children:"The Go Programming Language Specification"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"https://dave.cheney.net/2014/03/25/the-empty-struct",children:"The empty struct - Dave Cheney"})}),"\n"]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.p,{children:["Note: ",(0,a.jsx)(e.em,{children:"This article is not an in-depth tutorial or treatment of Golang's syntax, semantics, design or implementation, but a journal of my learnings."})]})]})}e.default=function(s){var e=void 0===s?{}:s,n=Object.assign({},(0,l.ah)(),e.components).wrapper;return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(c,e)})):c(e)}}},function(s){s.O(0,[774,888,179],(function(){return e=985,s(s.s=e);var e}));var e=s.O();_N_E=e}]);