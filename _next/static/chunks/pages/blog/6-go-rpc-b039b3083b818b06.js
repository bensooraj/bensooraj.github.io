(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[32],{1137:function(e,s,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/6-go-rpc",function(){return n(8851)}])},8851:function(e,s,n){"use strict";n.r(s);var l=n(5893),r=n(1151);function a(e){var s=Object.assign({h1:"h1",h2:"h2",p:"p",code:"code",blockquote:"blockquote",ul:"ul",li:"li",pre:"pre",span:"span",h3:"h3",ol:"ol",a:"a",hr:"hr",em:"em"},(0,r.ah)(),e.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(s.h1,{children:"Go RPCs (Remote Procedure Calls)"}),"\n",(0,l.jsx)(s.h2,{children:"Introduction"}),"\n",(0,l.jsxs)(s.p,{children:["Go's ",(0,l.jsx)(s.code,{children:"rpc"})," package enables communication across multiple machines, sort of like inter-process communication via funtion/method/procedure calls."]}),"\n",(0,l.jsx)(s.p,{children:"As the Go documentation puts it:"}),"\n",(0,l.jsxs)(s.blockquote,{children:["\n",(0,l.jsxs)(s.p,{children:["Package ",(0,l.jsx)(s.code,{children:"rpc"})," provides access to the exported methods of an object across a network or other I/O connection. A server registers an object, making it visible as a service with the name of the type of the object."]}),"\n"]}),"\n",(0,l.jsxs)(s.p,{children:["The object that is registered with the ",(0,l.jsx)(s.code,{children:"rpc"})," server can be either primitive/builtin data types (",(0,l.jsx)(s.code,{children:"int"}),", ",(0,l.jsx)(s.code,{children:"string"})," etc.) or user-defined ones (such as ",(0,l.jsx)(s.code,{children:"struct"}),"s). I would usually prefer a ",(0,l.jsx)(s.code,{children:"struct"}),"."]}),"\n",(0,l.jsxs)(s.p,{children:["Under the hood, by default, Go uses ",(0,l.jsx)(s.code,{children:"gob"})," for serializing and deserializing the remote procedure calls. This is configurable, that is, you can plug-in ",(0,l.jsx)(s.code,{children:"JSON"})," or other custom codecs."]}),"\n",(0,l.jsx)(s.h2,{children:"Prerequisites"}),"\n",(0,l.jsx)(s.p,{children:"The methods which define actions on the registered object must adhere to a specific function signature. The methods,"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsx)(s.li,{children:"and its type(s) must be exported (uppercased)"}),"\n",(0,l.jsx)(s.li,{children:"have two arguments, both exported (or builtin) types."}),"\n",(0,l.jsx)(s.li,{children:"their second argument is a pointer."}),"\n",(0,l.jsxs)(s.li,{children:["must have one return type, ",(0,l.jsx)(s.code,{children:"error"}),"."]}),"\n"]}),"\n",(0,l.jsx)(s.p,{children:"Essentially the method signature looks like the following:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsxs)(s.code,{className:"hljs language-go",children:[(0,l.jsxs)(s.span,{className:"hljs-function",children:[(0,l.jsx)(s.span,{className:"hljs-keyword",children:"func"})," ",(0,l.jsx)(s.span,{className:"hljs-params",children:"(t *T)"})]})," MethodName(argType T1, replyType *T2) ",(0,l.jsx)(s.span,{className:"hljs-type",children:"error"}),"\n"]})}),"\n",(0,l.jsx)(s.h2,{children:"Implementation"}),"\n",(0,l.jsxs)(s.p,{children:["Let's look at a dummy blog server and a client interacting with each other via ",(0,l.jsx)(s.code,{children:"rpc"}),"."]}),"\n",(0,l.jsx)(s.h3,{children:"a. Types"}),"\n",(0,l.jsx)(s.p,{children:"It's a good idea to wrap the object, along with the methods and types, into a package of its own. This makes it easier for both the server and client implementations to agree on common type definitions."}),"\n",(0,l.jsxs)(s.p,{children:["In the following code, ",(0,l.jsx)(s.code,{children:"Blog"})," will be registered with the ",(0,l.jsx)(s.code,{children:"rpc"})," server."]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsxs)(s.code,{className:"hljs language-go",children:[(0,l.jsx)(s.span,{className:"hljs-keyword",children:"type"})," Blog ",(0,l.jsx)(s.span,{className:"hljs-keyword",children:"struct"})," {\n\tposts      ",(0,l.jsx)(s.span,{className:"hljs-keyword",children:"map"}),"[",(0,l.jsx)(s.span,{className:"hljs-type",children:"int"}),"]Post\n\tlastPostID ",(0,l.jsx)(s.span,{className:"hljs-type",children:"int"}),"\n\tsync.Mutex\n}\n\n",(0,l.jsx)(s.span,{className:"hljs-keyword",children:"type"})," Post ",(0,l.jsx)(s.span,{className:"hljs-keyword",children:"struct"})," {\n\tID    ",(0,l.jsx)(s.span,{className:"hljs-type",children:"int"}),"\n\tTitle ",(0,l.jsx)(s.span,{className:"hljs-type",children:"string"}),"\n\tBody  ",(0,l.jsx)(s.span,{className:"hljs-type",children:"string"}),"\n}\n\n",(0,l.jsx)(s.span,{className:"hljs-comment",children:"// NewBlog is required because, even though Blog is exported its fields are not."}),"\n",(0,l.jsx)(s.span,{className:"hljs-comment",children:"// The fields are internal to the package."}),"\n",(0,l.jsxs)(s.span,{className:"hljs-function",children:[(0,l.jsx)(s.span,{className:"hljs-keyword",children:"func"})," ",(0,l.jsx)(s.span,{className:"hljs-title",children:"NewBlog"}),(0,l.jsx)(s.span,{className:"hljs-params",children:"()"})]})," *Blog {\n\t",(0,l.jsx)(s.span,{className:"hljs-keyword",children:"return"})," &Blog{\n\t\tposts: ",(0,l.jsx)(s.span,{className:"hljs-built_in",children:"make"}),"(",(0,l.jsx)(s.span,{className:"hljs-keyword",children:"map"}),"[",(0,l.jsx)(s.span,{className:"hljs-type",children:"int"}),"]Post),\n\t}\n}\n"]})}),"\n",(0,l.jsxs)(s.p,{children:["The function ",(0,l.jsx)(s.code,{children:"NewBlog() *Blog"})," is necessary since we aren't exporting its fields: ",(0,l.jsx)(s.code,{children:"posts"})," and ",(0,l.jsx)(s.code,{children:"lastPostID"}),"."]}),"\n",(0,l.jsx)(s.h3,{children:"b. Methods"}),"\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.code,{children:"Blog"})," will have two methods: ",(0,l.jsx)(s.code,{children:"AddPost"})," and ",(0,l.jsx)(s.code,{children:"GetPostByID"}),". Notice the function signature."]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsxs)(s.code,{className:"hljs language-go",children:[(0,l.jsxs)(s.span,{className:"hljs-function",children:[(0,l.jsx)(s.span,{className:"hljs-keyword",children:"func"})," ",(0,l.jsx)(s.span,{className:"hljs-params",children:"(b *Blog)"})]})," AddPost(payload, reply *Post) ",(0,l.jsx)(s.span,{className:"hljs-type",children:"error"})," {\n\tb.Lock()\n\t",(0,l.jsx)(s.span,{className:"hljs-keyword",children:"defer"})," b.Unlock()\n\n\t",(0,l.jsx)(s.span,{className:"hljs-keyword",children:"if"})," payload.Title == ",(0,l.jsx)(s.span,{className:"hljs-string",children:'""'})," || payload.Body == ",(0,l.jsx)(s.span,{className:"hljs-string",children:'""'})," {\n\t\t",(0,l.jsx)(s.span,{className:"hljs-keyword",children:"return"})," errors.New(",(0,l.jsx)(s.span,{className:"hljs-string",children:'"Title and Body must not be empty"'}),")\n\t}\n\n\tb.lastPostID++\n\n\t*reply = Post{ID: b.lastPostID, Title: payload.Title, Body: payload.Body}\n\tb.posts[reply.ID] = *reply\n\n\t",(0,l.jsx)(s.span,{className:"hljs-keyword",children:"return"})," ",(0,l.jsx)(s.span,{className:"hljs-literal",children:"nil"}),"\n}\n\n",(0,l.jsxs)(s.span,{className:"hljs-function",children:[(0,l.jsx)(s.span,{className:"hljs-keyword",children:"func"})," ",(0,l.jsx)(s.span,{className:"hljs-params",children:"(b *Blog)"})]})," GetPostByID(payload ",(0,l.jsx)(s.span,{className:"hljs-type",children:"int"}),", reply *Post) ",(0,l.jsx)(s.span,{className:"hljs-type",children:"error"})," {\n\tb.Lock()\n\t",(0,l.jsx)(s.span,{className:"hljs-keyword",children:"defer"})," b.Unlock()\n\n\t*reply = b.posts[payload]\n\n\t",(0,l.jsx)(s.span,{className:"hljs-keyword",children:"return"})," ",(0,l.jsx)(s.span,{className:"hljs-literal",children:"nil"}),"\n}\n"]})}),"\n",(0,l.jsxs)(s.p,{children:["Each method takes two arguments, ",(0,l.jsx)(s.code,{children:"payload"})," and ",(0,l.jsx)(s.code,{children:"reply"})," (you can name them anything). It receives the input from the client in the first parameter. The second argument (a pointer) is used for sending a response back to the client."]}),"\n",(0,l.jsx)(s.h3,{children:"c. Server"}),"\n",(0,l.jsx)(s.p,{children:"The server implementation is fairly simple:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsxs)(s.code,{className:"hljs language-go",children:[(0,l.jsx)(s.span,{className:"hljs-comment",children:"// Fetch an instance of the object"}),"\nblog := types.NewBlog()\n\nrpc.Register(blog) ",(0,l.jsx)(s.span,{className:"hljs-comment",children:"// Register the instance with the rpc"}),"\nrpc.HandleHTTP() ",(0,l.jsx)(s.span,{className:"hljs-comment",children:"// Configure the rpc to serve over HTTP"}),"\n\nerr := http.ListenAndServe(",(0,l.jsx)(s.span,{className:"hljs-string",children:'":3000"'}),", ",(0,l.jsx)(s.span,{className:"hljs-literal",children:"nil"}),")\n",(0,l.jsx)(s.span,{className:"hljs-keyword",children:"if"})," err != ",(0,l.jsx)(s.span,{className:"hljs-literal",children:"nil"})," {\n\tlog.Fatalln(",(0,l.jsx)(s.span,{className:"hljs-string",children:'"Error starting the RPC server"'}),", err)\n}\n"]})}),"\n",(0,l.jsx)(s.h3,{children:"d. Client"}),"\n",(0,l.jsxs)(s.p,{children:["Dial the server using ",(0,l.jsx)(s.code,{children:"rpc.DialHTTP"}),":"]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsxs)(s.code,{className:"hljs language-go",children:["client, err := rpc.DialHTTP(",(0,l.jsx)(s.span,{className:"hljs-string",children:'"tcp"'}),", ",(0,l.jsx)(s.span,{className:"hljs-string",children:'":3000"'}),")\n",(0,l.jsx)(s.span,{className:"hljs-keyword",children:"if"})," err != ",(0,l.jsx)(s.span,{className:"hljs-literal",children:"nil"})," {\n\tlog.Fatalln(",(0,l.jsx)(s.span,{className:"hljs-string",children:'"Error creating the RPC client"'}),", err)\n}\n"]})}),"\n",(0,l.jsxs)(s.p,{children:["And make the remote procedure calls using ",(0,l.jsx)(s.code,{children:"client.Call"}),". It takes three arguments:"]}),"\n",(0,l.jsxs)(s.ol,{children:["\n",(0,l.jsxs)(s.li,{children:["The method name of the form: ",(0,l.jsx)(s.code,{children:"<T>.<MethodName>"})]}),"\n",(0,l.jsx)(s.li,{children:"Input params"}),"\n",(0,l.jsx)(s.li,{children:"A pointer to receive the response from the server"}),"\n"]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsxs)(s.code,{className:"hljs language-go",children:[(0,l.jsx)(s.span,{className:"hljs-comment",children:"// Create a post"}),"\n",(0,l.jsx)(s.span,{className:"hljs-keyword",children:"var"})," post types.Post\n\n",(0,l.jsx)(s.span,{className:"hljs-comment",children:"// Create posts"}),"\nerr = client.Call(",(0,l.jsx)(s.span,{className:"hljs-string",children:'"Blog.AddPost"'}),", &types.Post{Title: ",(0,l.jsx)(s.span,{className:"hljs-string",children:'"post 1"'}),", Body: ",(0,l.jsx)(s.span,{className:"hljs-string",children:'"Hello, world!"'}),"}, &post)\n",(0,l.jsx)(s.span,{className:"hljs-keyword",children:"if"})," err != ",(0,l.jsx)(s.span,{className:"hljs-literal",children:"nil"})," {\n\tlog.Fatalln(",(0,l.jsx)(s.span,{className:"hljs-string",children:'"Error creating post"'}),", err)\n}\nlog.Printf(",(0,l.jsx)(s.span,{className:"hljs-string",children:'"[AddPost] ID: %d | Title: %s | Body: %s\\n"'}),", post.ID, post.Title, post.Body)\n\n",(0,l.jsx)(s.span,{className:"hljs-comment",children:"// Fetch a post by ID"}),"\nerr = client.Call(",(0,l.jsx)(s.span,{className:"hljs-string",children:'"Blog.GetPostByID"'}),", ",(0,l.jsx)(s.span,{className:"hljs-number",children:"3"}),", &post)\n",(0,l.jsx)(s.span,{className:"hljs-keyword",children:"if"})," err != ",(0,l.jsx)(s.span,{className:"hljs-literal",children:"nil"})," {\n\tlog.Fatalln(",(0,l.jsx)(s.span,{className:"hljs-string",children:'"Error creating post"'}),", err)\n}\nlog.Printf(",(0,l.jsx)(s.span,{className:"hljs-string",children:'"[GetPostByID] ID: %d | Title: %s | Body: %s\\n"'}),", post.ID, post.Title, post.Body)\n"]})}),"\n",(0,l.jsxs)(s.p,{children:["The entire code can be found on ",(0,l.jsx)(s.a,{href:"https://github.com/bensooraj/blog-code-resource-repo/tree/main/borneo",children:"Github"}),"."]}),"\n",(0,l.jsx)(s.h2,{children:"Some thoughts"}),"\n",(0,l.jsxs)(s.p,{children:["In our implementation, the initial handshake between the ",(0,l.jsx)(s.code,{children:"rpc"})," client and server are negotiated over HTTP. Thereafter, the HTTP server acts like a proxy or a conduit between the two, a concept known as ",(0,l.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/HTTP_tunnel",children:"HTTP tunneling"}),". I believe this can be customized."]}),"\n",(0,l.jsxs)(s.p,{children:["It can be difficult to standardize (to follow common semantics) RPC implementations. This gap is what projects like ",(0,l.jsx)(s.code,{children:"gRPC"}),", ",(0,l.jsx)(s.code,{children:"dRPC"})," etc. attepmt to solve."]}),"\n",(0,l.jsxs)(s.p,{children:["It should be obvious by now that you can register only one object with a given name with the ",(0,l.jsx)(s.code,{children:"rpc"})," server."]}),"\n",(0,l.jsx)(s.p,{children:"Further reading:"}),"\n",(0,l.jsxs)(s.ol,{children:["\n",(0,l.jsx)(s.li,{children:(0,l.jsxs)(s.a,{href:"https://golang.org/pkg/net/rpc/",children:["godoc: Package ",(0,l.jsx)(s.code,{children:"rpc"})]})}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.a,{href:"https://grpc.io/",children:"gRPC: A high performance, open source universal RPC framework"})}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.a,{href:"https://github.com/storj/drpc",children:"dRPC: A lightweight, drop-in replacement for gRPC"})}),"\n"]}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsxs)(s.p,{children:["Note: ",(0,l.jsx)(s.em,{children:"This article is not an in-depth tutorial or treatment of Golang's syntax, semantics, design or implementation, but a journal of my learnings."})]})]})}s.default=function(e){var s=void 0===e?{}:e,n=Object.assign({},(0,r.ah)(),s.components).wrapper;return n?(0,l.jsx)(n,Object.assign({},s,{children:(0,l.jsx)(a,s)})):a(s)}}},function(e){e.O(0,[774,888,179],(function(){return s=1137,e(e.s=s);var s}));var s=e.O();_N_E=s}]);